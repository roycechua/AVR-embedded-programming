
INPUTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000044  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000098  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000357  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ff  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000151  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026f  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000b77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	08 d0       	rcall	.+16     	; 0x2e <main>
  1e:	10 c0       	rjmp	.+32     	; 0x40 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <_Z6initIOv>:
#define RED PB0
#define GREEN PB2
#define PUSHBUTTON PB1

void initIO(void){
	DDRB |= (1<<YELLOW)|(1<<RED)|(1<<GREEN);
  22:	87 b3       	in	r24, 0x17	; 23
  24:	85 61       	ori	r24, 0x15	; 21
  26:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PUSHBUTTON); // this can be ommited
  28:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= (1<<PUSHBUTTON); // Activates the internal pull-up resistor
  2a:	c1 9a       	sbi	0x18, 1	; 24
  2c:	08 95       	ret

0000002e <main>:
}

int main(void)
{
	cli();
  2e:	f8 94       	cli
	initIO();
  30:	f8 df       	rcall	.-16     	; 0x22 <_Z6initIOv>
	sei();
  32:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		if(!(PINB & (1<<PUSHBUTTON))) PORTB |= (1<<RED);
  34:	b1 99       	sbic	0x16, 1	; 22
  36:	02 c0       	rjmp	.+4      	; 0x3c <main+0xe>
  38:	c0 9a       	sbi	0x18, 0	; 24
  3a:	fc cf       	rjmp	.-8      	; 0x34 <main+0x6>
		else PORTB &= ~(1<<RED);
  3c:	c0 98       	cbi	0x18, 0	; 24
  3e:	fa cf       	rjmp	.-12     	; 0x34 <main+0x6>

00000040 <_exit>:
  40:	f8 94       	cli

00000042 <__stop_program>:
  42:	ff cf       	rjmp	.-2      	; 0x42 <__stop_program>
